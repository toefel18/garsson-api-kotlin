/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id "base"
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.3.31"
    id "com.peterabeles.gversion" version "1.5.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    implementation platform("com.fasterxml.jackson:jackson-bom:2.9.9")

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6'
    compile 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.6'

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    compile "org.slf4j:slf4j-api:1.7.26"
    compile "ch.qos.logback:logback-classic:1.2.3"

    compile 'io.jsonwebtoken:jjwt-api:0.10.6'
    runtime 'io.jsonwebtoken:jjwt-impl:0.10.5'
    runtime 'io.jsonwebtoken:jjwt-jackson:0.10.6'

    compile "io.undertow:undertow-core:2.0.21.Final"
    compile "io.undertow:undertow-websockets-jsr:2.0.21.Final"

    compile 'org.flywaydb:flyway-core:5.2.4'
    compile 'com.zaxxer:HikariCP:3.3.1'
    compile 'org.postgresql:postgresql:42.2.5'
    implementation 'org.jetbrains.exposed:exposed:0.13.7'

    // generate typescript typings
    compile 'com.github.ntrrgc:ts-generator:1.1.1'

    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.3.2'
    testCompile 'io.rest-assured:rest-assured:4.0.0'
    testCompile "org.testcontainers:testcontainers:1.11.3"
}

gversion {
    srcDir       = "src/main/kotlin/"           // path is relative to the sub-project by default
    // Gradle variables can also be used
    // E.g. "${project.rootDir}/module/src/main/java"
    classPackage = "nl.toefel.garsson"
    className    = "BuildInfo"                // optional. If not specified GVersion is used
    dateFormat   = "yyyy-MM-dd'T'HH:mm:ss'Z'" // optional. This is the default
    timeZone     = "UTC"                      // optional. UTC is default
    debug        = false                      // optional. print out extra debug information
    language     = "kotlin"                     // optional. Can be Java or Kotlin, case insensitive
    explicitType = false                      // optional. Force types to be explicitly printed
}

task addBranchToVersionFile() {
    doLast {
        def branch = 'git rev-parse --abbrev-ref HEAD'.execute()
        branch.waitFor()
        File buildinfo = new File("src/main/kotlin/nl/toefel/garsson/BuildInfo.kt")
        buildinfo.withWriterAppend { out -> out.println("const val GIT_BRANCH = \"${branch.text.trim()}\"")}
    }
}

project.addBranchToVersionFile.dependsOn(createVersionFile)
project.compileKotlin.dependsOn(addBranchToVersionFile)

test {
    useJUnitPlatform()
}

test {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
}